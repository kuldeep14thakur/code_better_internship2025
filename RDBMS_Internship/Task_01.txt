CREATE DATABASE IF NOT EXISTS university;
USE university;
CREATE TABLE department (department_id INT PRIMARY KEY,department_name VARCHAR(100));

INSERT INTO department (department_id, department_name) VALUES
(1, 'Computer Science'),
(2, 'Mechanical Engineering'),
(3, 'Electrical Engineering');

CREATE TABLE professor (professor_id INT PRIMARY KEY,first_name VARCHAR(100),last_name VARCHAR(100),email VARCHAR(100),phone VARCHAR(20));

INSERT INTO professor (professor_id, first_name, last_name, email, phone) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '234-567-8901'),
(3, 'Michael', 'Johnson', 'michael.johnson@example.com', '345-678-9012');

CREATE TABLE student (student_id INT PRIMARY KEY,first_name VARCHAR(100),last_name VARCHAR(100),
email VARCHAR(100),phone VARCHAR(20),date_of_birth DATE,enrollment_date DATE,department_id INT,
FOREIGN KEY (department_id) REFERENCES department(department_id));

INSERT INTO student (student_id, first_name, last_name, email, phone, date_of_birth, enrollment_date, department_id) VALUES
(1, 'Alice', 'Brown', 'alice.brown@example.com', '555-1234', '2000-05-15', '2018-08-20', 1),
(2, 'Bob', 'White', 'bob.white@example.com', '555-2345', '1999-12-22', '2017-09-10', 2),
(3, 'Charlie', 'Green', 'charlie.green@example.com', '555-3456', '2001-03-10', '2019-01-15', 3);

CREATE TABLE course (course_id INT PRIMARY KEY,course_name VARCHAR(100),department_id INT,professor_id INT,credits INT,
FOREIGN KEY (department_id) REFERENCES department(department_id),
FOREIGN KEY (professor_id) REFERENCES professor(professor_id));

INSERT INTO course (course_id, course_name, department_id, professor_id, credits) VALUES
(1, 'Data Structures', 1, 1, 4),
(2, 'Thermodynamics', 2, 2, 3),
(3, 'Circuit Analysis', 3, 3, 3);

CREATE TABLE enrollment (enrollment_id INT PRIMARY KEY,student_id INT,course_id INT,enrollment_date DATE,grade VARCHAR(5),
FOREIGN KEY (student_id) REFERENCES student(student_id),
FOREIGN KEY (course_id) REFERENCES course(course_id));

INSERT INTO enrollment (enrollment_id, student_id, course_id, enrollment_date, grade) VALUES
(1, 1, 1, '2018-08-20', 'A'),
(2, 2, 2, '2017-09-10', 'B'),
(3, 3, 3, '2019-01-15', 'A'),
(4, 1, 2, '2019-08-22', 'B'),
(5, 2, 3, '2020-01-10', 'C');


1. Find the Total Number of Students in Each Department.

SELECT department_name, COUNT(first_name) AS _count
FROM student as st
JOIN department as dt
ON st.department_id = dt.department_id
GROUP BY st.department_id; 

2. List All Courses Taught by a Specific Professor.

SELECT c.course_name, c.credits, d.department_name
FROM course c
JOIN professor p ON c.professor_id = p.professor_id
JOIN department d ON c.department_id = d.department_id
WHERE p.professor_id = 1;

3. Find the Average Grade of Students in Each Course.

SELECT c.course_name,
       AVG(CASE 
               WHEN e.grade = 'A' THEN 4
               WHEN e.grade = 'B' THEN 3
               WHEN e.grade = 'C' THEN 2
               WHEN e.grade = 'D' THEN 1
               WHEN e.grade = 'F' THEN 0
               ELSE NULL
           END) AS average_grade
FROM course c
JOIN enrollment e ON c.course_id = e.course_id
GROUP BY c.course_id
ORDER BY average_grade DESC;

4. List All Students Who Have Not Enrolled in Any Courses.

SELECT s.first_name, s.last_name, s.email, s.phone
FROM student s
LEFT JOIN enrollment e ON s.student_id = e.student_id
WHERE e.enrollment_id IS NULL;


5. Find the Number of Courses Offered by Each Department.

SELECT d.department_name, COUNT(c.course_id) AS number_of_courses
FROM department d
JOIN course c ON d.department_id = c.department_id
GROUP BY d.department_id
ORDER BY number_of_courses DESC;

6. List All Students Who Have Taken a Specific Course (e.g., 'Database Systems').

SELECT s.first_name, s.last_name, s.email, s.phone
FROM student s
JOIN enrollment e ON s.student_id = e.student_id
JOIN course c ON e.course_id = c.course_id
WHERE c.course_name = 'Database Systems';

7. Find the Most Popular Course Based on Enrollment Numbers.

SELECT c.course_name, COUNT(e.student_id) AS enrollment_count
FROM course c
JOIN enrollment e ON c.course_id = e.course_id
GROUP BY c.course_id
ORDER BY enrollment_count DESC
LIMIT 1;

8. Find the Average Number of Credits Per Student in a Department.

SELECT d.department_name,
       AVG(c.credits) AS average_credits_per_student
FROM department d
JOIN student s ON d.department_id = s.department_id
JOIN enrollment e ON s.student_id = e.student_id
JOIN course c ON e.course_id = c.course_id
GROUP BY d.department_id
ORDER BY average_credits_per_student DESC;

9. List All Professors Who Teach in More Than One Department.

SELECT p.first_name, p.last_name, p.email, p.phone
FROM professor p
JOIN course c ON p.professor_id = c.professor_id
JOIN department d ON c.department_id = d.department_id
GROUP BY p.professor_id
HAVING COUNT(DISTINCT c.department_id) > 1;

10. Get the Highest and Lowest Grade in a Specific Course (e.g., 'Operating Systems').

SELECT c.course_name,
       MAX(CASE 
               WHEN e.grade = 'A' THEN 4
               WHEN e.grade = 'B' THEN 3
               WHEN e.grade = 'C' THEN 2
               WHEN e.grade = 'D' THEN 1
               WHEN e.grade = 'F' THEN 0
               ELSE NULL
           END) AS highest_grade,
       MIN(CASE 
               WHEN e.grade = 'A' THEN 4
               WHEN e.grade = 'B' THEN 3
               WHEN e.grade = 'C' THEN 2
               WHEN e.grade = 'D' THEN 1
               WHEN e.grade = 'F' THEN 0
               ELSE NULL
           END) AS lowest_grade
FROM course c
JOIN enrollment e ON c.course_id = e.course_id
WHERE c.course_name = 'Operating Systems'
GROUP BY c.course_name;































